datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  email         String        @unique
  username      String        @unique
  password      String?
  avatar        String?
  oauthProvider String?
  oauthId       String?
  name          String?
  createdAt     DateTime      @default(now())
  events        Event[]
  tickets       Ticket[]
  follows       Follow[]      @relation("Following")
  followers     Follow[]      @relation("Follower")
  saves         Save[]
  likes         Like[]
  requests      Request[]
  soldTickets   Transaction[] @relation("tickets sold")
  boughtTickets Transaction[] @relation("tickets bought")
}

model Event {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  cover       String
  date        DateTime @db.Date
  dateTime    DateTime
  city        City     @relation(fields: [cityId], references: [id])
  cityId      String   @db.ObjectId
  address     String
  category    String
  tags        String[]
  tickets     Ticket[]
  saves       Save[]
  likes       Like[]
  hostedBy    String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
}

model City {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  events Event[]
}

model Request {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  name      String
  eventUrl  String
  status    String
  createdAt DateTime @default(now()) 
}

model Ticket {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  event        Event         @relation(fields: [eventId], references: [id])
  eventId      String        @db.ObjectId
  user         User          @relation(fields: [userId], references: [id])
  userId       String        @db.ObjectId
  price        Float
  quantity     Int
  category     String
  status       String
  transactions Transaction[]
  createdAt    DateTime      @default(now())
}

model Transaction {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  ticketId  String   @db.ObjectId
  seller    User     @relation("tickets sold", fields: [buyerId], references: [id])
  sellerId  String   @db.ObjectId
  buyer     User     @relation("tickets bought", fields: [buyerId], references: [id])
  buyerId   String   @db.ObjectId
  amount    Float
  status    String
  createdAt DateTime @default(now())
}

model Save {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String   @db.ObjectId
  createdAt DateTime @default(now())
}

model Follow {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  follower    User     @relation("Follower", fields: [followerId], references: [id])
  followerId  String   @db.ObjectId
  following   User     @relation("Following", fields: [followingId], references: [id])
  followingId String   @db.ObjectId
  createdAt   DateTime @default(now())
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String   @db.ObjectId
  createdAt DateTime @default(now())
}
